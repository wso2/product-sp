---
- include: sync_kube_master_certs.yml
  when: inventory_hostname in groups['kube-master']
  tags: k8s-secrets

- include: sync_kube_node_certs.yml
  when: inventory_hostname in groups['k8s-cluster']
  tags: k8s-secrets

- name: gen_certs_vault | Read in the local credentials
  command: cat /etc/vault/roles/kube/userpass
  register: kube_vault_creds_cat
  when: inventory_hostname == groups['k8s-cluster']|first

- name: gen_certs_vault | Set facts for read Vault Creds
  set_fact:
    kube_vault_creds: "{{ hostvars[groups['k8s-cluster']|first]['kube_vault_creds_cat']['stdout'] | from_json }}"
  when: inventory_hostname == groups['k8s-cluster']|first

- name: gen_certs_vault | Log into Vault and obtain an token
  uri:
    url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}/v1/auth/userpass/login/{{ kube_vault_creds.username }}"
    headers:
      Accept: application/json
      Content-Type: application/json
    method: POST
    body_format: json
    body:
      password: "{{ kube_vault_creds.password }}"
  register: kube_vault_login_result
  when: inventory_hostname == groups['k8s-cluster']|first

- name: gen_certs_vault | Set fact for Vault API token
  set_fact:
    kube_vault_headers:
        Accept: application/json
        Content-Type: application/json
        X-Vault-Token: "{{ hostvars[groups['k8s-cluster']|first]['kube_vault_login_result']['json']['auth']['client_token'] }}"

# Issue certs to kube-master nodes
- include: ../../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_copy_ca: "{{ item == kube_master_certs_needed|first }}"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ groups['kube-master'] }}"
    issue_cert_path: "{{ item }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
  with_items: "{{ kube_master_certs_needed|d([]) }}"
  when: inventory_hostname in groups['kube-master']

- include: ../../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_alt_names: >-
        {{
        groups['kube-master'] +
        ['kubernetes.default.svc.cluster.local', 'kubernetes.default.svc', 'kubernetes.default', 'kubernetes'] +
        ['localhost']
        }}
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ groups['kube-master'] }}"
    issue_cert_ip_sans: >-
        [
        {%- for host in groups['kube-master']  -%}
        "{{ hostvars[host]['ansible_default_ipv4']['address'] }}",
        {%- endfor -%}
        "127.0.0.1","::1","{{ kube_apiserver_ip }}"
        ]
    issue_cert_path: "{{ item }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
  with_items: "{{ kube_api_certs_needed|d([]) }}"
  when: inventory_hostname in groups['kube-master']

# Issue node certs to k8s-cluster nodes
- include: ../../../vault/tasks/shared/issue_cert.yml
  vars:
    issue_cert_copy_ca: "{{ item == kube_node_certs_needed|first }}"
    issue_cert_file_group: "{{ kube_cert_group }}"
    issue_cert_file_owner: kube
    issue_cert_headers: "{{ kube_vault_headers }}"
    issue_cert_hosts: "{{ groups['k8s-cluster'] }}"
    issue_cert_path: "{{ item }}"
    issue_cert_role: kube
    issue_cert_url: "{{ hostvars[groups.vault|first]['vault_leader_url'] }}"
  with_items: "{{ kube_node_certs_needed|d([]) }}"
  when: inventory_hostname in groups['k8s-cluster']
