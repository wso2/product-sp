@App:name('PublishWSO2Events')
@App:Description('Demonstrates how to configure WSO2 Stream Processor to send sweet production events via Wso2event transport.')
/*
Purpose:
    This application demonstrates how to configure WSO2 Stream Processor to send sweet production events via Wso2event transport in wso2event format,and view the output on the wso2event-consumer.

Prerequisites:
    1) Save this sample. The following message would be shown on the console
        *Siddhi App PublishWSO2Events successfully deployed.

Executing the Sample:
    1) Open a terminal and issue command from the {WSO2SPHome}/samples/sample-clients/wso2event-server and run 'ant' command without any arguments.
    2) Start the Siddhi application by clicking on 'Run'
    3) If the Siddhi application starts successfully, the following messages would be shown on the console
        * PublishWSO2Events.siddhi - Started Successfully!
        * user admin connected (output for default username).


Testing the Sample:
    1) To open event simulator by clicking on the second icon or press Ctrl+Shift+I.
    2) In the Single Simulation tab of the panel, select values as follows:
        Siddhi App Name  : PublishWSO2Events
        Stream Name     : SweetProductiontream
    3) In the name field and amount fields, enter 'toffee', '50.0' respectively and then click Send to send the event. 
    4) Send some more events.



Viewing the Results:
   *See the output in the terminal of {WSO2SPHome}/samples/sample-clients/wso2event-server.You will get the output as follows:
    [java] Event{
    [java]   streamId='sweet.stream:1.0.0',
    [java]   timeStamp=1512730740117,
    [java]   metaData=null,
    [java]   correlationData=null,
    [java]   payloadData=[toffee, 50.0],
    [java]   arbitraryDataMap={},
    [java] }
    [java] ] for username admin
    [java] [org.wso2.carbon.databridge.core.internal.queue.QueueWorker] : 0 messages in queue after DataBridge-Core-pool-1-thread-2 worker has finished work


    Notes:
    If the message "'LowProducitonAlertStream' stream could not connect to 'localhost:7614'",it could be due to port 7614, defined in the Siddhi application is already being used by a different program. To resolve this issue, please do the following,
            * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
            * Change the port 5672 to an unused port.
            * Start the application and check whether the expected output appear on the console.
*/

define stream SweetProductionStream (name string, amount double);

@sink(type='wso2event', url="tcp://localhost:7612", auth.url="ssl://localhost:7712", protocol="thrift", username="admin", password="admin", mode="non-blocking", wso2.stream.id='sweet.stream:1.0.0',
@map(type='wso2event'))
define stream LowProducitonAlertStream (name string, amount double);

from SweetProductionStream
select *
insert into LowProducitonAlertStream;

