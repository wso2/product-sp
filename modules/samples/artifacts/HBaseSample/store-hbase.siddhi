@App:name("store-hbase")


/*
Purpose:
    This application demonstrates how to perform CRUD operations in HBase stores using Siddhi queries. The sample depicts a scenario in a sweet production factory. The sweet production details such as name of the raw material, amount used for production can be stored using insertSweetProductionStream. The sweet production details such as name of the raw material, amount used for production can be stored using insertSweetProductionStream. The following streams can be used to search, delete, update or upsert(update or insert) the existing data in the store.
    Search - searchSweetProductionStream
    delete - deleteSweetProductionStream
    update - updateSweetProductionStream
    update or insert - updateOrInsertSweetProductionStream
    contains - containsSweetProductionStream (to check whether a particular data contains in the store)


Prerequisites:
    1) Ensure that HBase is installed on your machine.
        To install HBase use : http://www-us.apache.org/dist/hbase/
        Once you install HBase start the server
        For more information refer https://hbase.apache.org/
    2) The OSGi-fied shaded HBase client and Apache HTrace core bundles should be added to the WSO2 SP classpath:
        2.1) Download the following files:
            2.1.1) HBase shaded client: http://central.maven.org/maven2/org/apache/hbase/hbase-shaded-client/1.3.1/hbase-shaded-client-1.3.1.jar
            2.1.2) Apache HTrace core: http://central.maven.org/maven2/org/apache/htrace/htrace-core/3.1.0-incubating/htrace-core-3.1.0-incubating.jar
        2.2) Use the "jartobundle" tool in {WSO2_SP_Home}/bin to convert the above jars into OSGi bundles.
            For Windows: <SP_HOME>/bin/jartobundle.bat <PATH_OF_DOWNLOADED_JAR> <PATH_OF_CONVERTED_JAR>
            For Linux: <SP_HOME>/bin/jartobundle.sh <PATH_OF_DOWNLOADED_JAR> <PATH_OF_CONVERTED_JAR>
        2.3) Copy over the converted bundles to the {WSO2_SP_Home}/lib directory .
    4) Save this sample

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * store-hbase.siddhi - Started Successfully!

    Notes:
    If you edit this application while it's running, stop the application -> Save -> Start.

Testing the Sample:
    1) Simulate single events. For this, click on 'Event Simulator' (double arrows on left tab) -> 'Single Simulation' -> Select 'HbaseSample' as 'Siddhi App Name' -> Select 'searchSweetProductionStream' as 'Stream Name' -> Provide attribute values -> Send
    2) Send at-least one event with the single event simulator, where the name matches a name value in the data we previously inserted to the SweetProductionTable. This would satisfy the 'on' condition of our join query.
    3) Likewise the events can be sent to the other corresponding streams to add, delete, update, insert, search events.
    4) After a change in the store, using the search stream the developer can see whether the operation is successful.
    5) Primary Key constraint SweetProductionTable is disabled, since name cannot be used as a PrimaryKey in ProductionTable.
       Siddhi functions can be used to create a unique id for the received events which can then be used to apply Primary Key constraint on the data store records. (http://wso2.github.io/siddhi/documentation/siddhi-4.0/#function)

Viewing the Results:
    See the output for row materials on the console. Inserted, deleted, updated events can be checked by searchSweetProductionStream.

    Note:
    Stop this Siddhi application, once you are done with the execution

*/



@App:description('Receive events via simulator and received data are persisted in store.')

define stream insertSweetProductionStream (name string, amount double);
define stream deleteSweetProductionStream (name string);
define stream searchSweetProductionStream (name string);
define stream updateSweetProductionStream (name string, amount double);
define stream updateOrInsertSweetProductionStream (name string, amount double);
define stream containsSweetProductionStream (name string, amount double);

@sink(type='log')
define stream logStream(name string, amount double);


@Store(type='hbase', hbase.zookeeper.quorum='localhost')
--@primaryKey('name')
define table SweetProductionTable (name string, amount double);

/* Inserting event into the store */
@info(name='query1')
from insertSweetProductionStream
insert into SweetProductionTable;

/* Deleting event from the store */
@info(name = 'query2')
from deleteSweetProductionStream
delete SweetProductionTable 
on SweetProductionTable.name == name ;

/* Updating event from the store (issue fixing stage) */

@info(name = 'query3')
from updateSweetProductionStream
update SweetProductionTable 
on SweetProductionTable.name == name ;

/* Updating or inserting event from the store */
@info(name = 'query4')
from updateOrInsertSweetProductionStream
update or insert into SweetProductionTable
on SweetProductionTable.name == name;

/* Siddhi In in store */
@info(name = 'query5')
from containsSweetProductionStream
[(SweetProductionTable.name == name) in SweetProductionTable]
insert into logStream;

--Perform a join on raw material name. So that the data in the store can be viewed
@info(name='query6')
from searchSweetProductionStream as s join SweetProductionTable as sp
    on s.name == sp.name
select sp.name, sp.amount
insert into logStream;
