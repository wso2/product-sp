{
   "templateGroup": {
      "uuid": "TwitterAnalytics",
      "name": "TwitterAnalytics",
      "description": "Analyzes real time tweets and display popular tweets for the given query.",
      "ruleTemplates": [
         {
            "uuid": "TwitterAnalytics",
            "name": "TwitterAnalytics",
            "description": "Analyzes real time tweets and display popular tweets for the given query.",
            "type": "template",
            "instanceCount": "one",
            "script": "var ConsumerKey = myFunction1('${userInputForConsumerKey}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction1(input) {\n\treturn input;\n}\n\n\n\n\nvar ConsumerSecret = myFunction2('${userInputForConsumerSecret}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction2(input) {\n\treturn input;\n}\n\n\n\n\nvar AccessToken = myFunction3('${userInputForAccessToken}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction3(input) {\n\treturn input;\n}\n\n\n\n\nvar AccessTokenSecret = myFunction4('${userInputForAccessTokenSecret}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction4(input) {\n\treturn input;\n}\n\n\n\n\nvar Track = myFunction5('${userInputForTrack}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction5(input) {\n\treturn input;\n}\n\n\n\n\nvar Language = myFunction6('${userInputForLanguage}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction6(input) {\n\treturn input;\n}\n\n\n\n\nvar count = myFunction7('${userInputForcount}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction7(input) {\n\treturn input;\n}\n\n\n\n\nvar query = myFunction8('${userInputForquery}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction8(input) {\n\treturn input;\n}\n\n\n\n\nvar PollingInterval = myFunction9('${userInputForPollingInterval}');\n\n/**\n* Does some magic on given variable\n* @returns Processed input\n* @param input User given value\n*/\nfunction myFunction9(input) {\n\treturn input;\n}\n\n\n\n\n",
            "templates": [
               {
                  "type": "siddhiApp",
                  "content": "@App:name('TwitterAnalytics') \n@App:description('Twitter Analytics using Twitter Extension') \n\n@source(type='twitter',  consumer.key='${ConsumerKey}', consumer.secret='${ConsumerSecret}', \naccess.token ='${AccessToken}', access.token.secret='${AccessTokenSecret}', mode=\"streaming\",  track='${Track}',  language = '${Language}',  @map(type='keyvalue', @attributes(created_at = 'createdAt', id = 'tweetId' , text = 'text',location = 'user.location', hashtags = 'hashtags' , mentions = 'userMentions',trackwords = 'track.words')))\n\ndefine stream Tweetstream(created_at string, id long, text string, location string, hashtags string, mentions string,trackwords string);\n--define stream Tweetstream(created_at string, id long, text string, location string, hashtags string, mentions string);\n\ndefine stream Sentimentstream(count long,id long, timestamp string,CDate string, TweetID string, value int,country string, hashtags string, mentions string);\ndefine stream SentimentTypestream(count long,id long ,timestamp string,CDate string, TweetID string, value int, type string, country string , hashtags string, mentions string);\n\n@Store(type=\"rdbms\",datasource=\"Twitter_Analytics\")\ndefine aggregation TweetAggre\nfrom SentimentTypestream\nselect count() as count, avg(value) as average\naggregate by  timestamp every sec ... year;\n\n@Store(type=\"rdbms\",datasource=\"Twitter_Analytics\")\ndefine table sentiment(count long,id long, timestamp string,CDate string, TweetID string, value int, type string, country string, hashtags string, mentions string);\n\n@Store(type=\"rdbms\",datasource=\"Twitter_Analytics\")\ndefine table textCloud(id long, timestamp long, words string);\n\n@Store(type=\"rdbms\",datasource=\"Twitter_Analytics\")\ndefine table hashtagCloud(id long, timestamp long, hashtag string);\n\n@Store(type=\"rdbms\",datasource=\"Twitter_Analytics\")\ndefine table mentionCloud(id long, timestamp long, mention string);\n\n@Store(type=\"rdbms\",datasource=\"Twitter_Analytics\")\ndefine table hashTag(id long, trackwords string);\n\n--Sentiment Analysis\nfrom Tweetstream\nselect count() as count,currentTimeMillis() as id,time:utcTimestamp() as timestamp,created_at as CDate,convert(id,'string') as TweetID, sentiment:getRate(text) as value,ifThenElse(location is null,'undefined',find:country(location))  as country, hashtags, mentions\ninsert into Sentimentstream;\n\nfrom Sentimentstream[value<0]\nselect count, id,timestamp,CDate,TweetID, value,'negative' as type,country, hashtags, mentions\ninsert into SentimentTypestream;\n\nfrom Sentimentstream[value>=0]\nselect count, id,timestamp,CDate,TweetID, value, ifThenElse(value>0,'positive','neutral') as type,country, hashtags, mentions\ninsert into SentimentTypestream;\n\n@info(name='query1')\nfrom SentimentTypestream\nselect *\ninsert into sentiment;\n\nfrom Tweetstream\nselect currentTimeMillis() as id, trackwords\ninsert into Outputstream;\n\nfrom Outputstream\nselect *\ninsert into hashTag;\n\n--Words for text cloud\n@info(name='Filtering words for text cloud')\nfrom Tweetstream#text:tokenize(text)\ninsert all events into textStream;\n\nfrom textStream[filter:word(token)]\nselect count() as id, currentTimeMillis() as timestamp,token as words\ninsert into Tokens;\n\n@info(name='inserting into database')\nfrom Tokens\nselect *\ninsert into textCloud;\n\n--Words for hashtag cloud\n@info(name='Filtering words for hashtag cloud')\nfrom Tweetstream#entity:tokenize(hashtags)\nselect count() as id, currentTimeMillis() as timestamp, token as hashtag\ninsert all events into hashtagstream;\n\n@info(name='inserting into hashtag cloud table')\nfrom hashtagstream\nselect *\ninsert into hashtagCloud;\n\n--Words for mention cloud\n@info(name='Filtering words for mention cloud')\nfrom Tweetstream#entity:tokenize(mentions)\nselect count() as id, currentTimeMillis() as timestamp, token as mention\ninsert all events into mentionstream;\n\n@info(name='inserting into mention table')\nfrom mentionstream\nselect *\ninsert into mentionCloud;"
               },
               {
                  "type": "siddhiApp",
                  "content": "@App:name(\"PopularTweets\")\n\n@App:description('Retrieving Popular Tweets')\n\n@source(type='twitter' , consumer.key='${ConsumerKey}', consumer.secret='${ConsumerSecret}', \naccess.token ='${AccessToken}', access.token.secret='${AccessTokenSecret}', mode='polling', count = '${count}', query = '${query}', polling.interval = '${PollingInterval}', result.type = 'popular', @map(type='keyvalue', @attributes(createdAt = 'createdAt', id = 'tweetId', text= 'text')))\n\ndefine stream TweetStream(createdAt string, id long, text string);\n\n@Store(type=\"rdbms\",datasource=\"Twitter_Analytics\")\ndefine table PopularTweet (timestamp long, TweetID string);\n\nfrom TweetStream\nselect currentTimeMillis() as timestamp,convert(id,'string') as TweetID\ninsert into PopularStream;\n\nfrom PopularStream\nselect *\ninsert into PopularTweet;"
               }
            ],
            "properties": {
               "userInputForConsumerKey": {
                  "fieldName": "ConsumerKey",
                  "description": "Twitter API key",
                  "defaultValue": ""
               },
               "userInputForConsumerSecret": {
                  "fieldName": "ConsumerSecret",
                  "description": "Twitter API secret",
                  "defaultValue": ""
               },
               "userInputForAccessToken": {
                  "fieldName": "AccessToken",
                  "description": "Access token is used to make API requests on behalf of your account",
                  "defaultValue": ""
               },
               "userInputForAccessTokenSecret": {
                  "fieldName": "AccessTokenSecret",
                  "description": "Access token secret is used to make API requests on behalf of your account",
                  "defaultValue": ""
               },
               "userInputForTrack": {
                  "fieldName": "Track",
                  "description": "Keywords to filter tweets",
                  "defaultValue": ""
               },
               "userInputForLanguage": {
                  "fieldName": "Language",
                  "description": "Language to filter tweets",
                  "defaultValue": ""
               },
               "userInputForcount": {
                  "fieldName": "Count",
                  "description": "Number of tweets per page, up to a maximum of 100",
                  "defaultValue": ""
               },
               "userInputForquery": {
                  "fieldName": "Query",
                  "description": "Query for Polling Tweets",
                  "defaultValue": ""
               },
               "userInputForPollingInterval": {
                  "fieldName": "PollingInterval",
                  "description": "Period of time (in seconds) to poll tweets periodically",
                  "defaultValue": ""
               }
            }
         }
      ]
   }
}