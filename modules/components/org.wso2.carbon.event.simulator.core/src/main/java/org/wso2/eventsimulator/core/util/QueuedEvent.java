/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.eventsimulator.core.util;


import org.wso2.siddhi.core.event.Event;

/**
 * QueuedEvent class implements Comparable.
 * This class is used to sort the events produced based on the timestamp.
 * */
public class QueuedEvent implements Comparable<QueuedEvent> {
    private Long id;
    private Event event;

    /**
     * QueuedEvent() creates an object of QueuedEvent
     *
     * @param id    : the timestamp of the event which will be used as the events id
     * @param event : an event generated by the event simulator
     * */
    public QueuedEvent(Long id, Event event) {
        this.id = id;
        this.event = event;
    }

    public Event getEvent() {
        return event;
    }

    /**
     * compareTo() is used to sort events by comparing their id's (i.e. timestamp)
     *
     * @param event : a QueuedEvent object
     * @return
     * */
    public int compareTo(QueuedEvent event) {
        if (id < event.id) {
            return 1;
        } else if (id > event.id) {
            return -1;
        } else {
            return 0;
        }
    }
}
