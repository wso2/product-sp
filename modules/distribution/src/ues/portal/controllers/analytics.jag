<%
    var TYPE = "type";
    var TABLE_NAME = "tableName";
    var TIME_FROM = "timeFrom";
    var TIME_TO = "timeTo";
    var START = "start";
    var COUNT = "count";
    var HTTPS_TRANSPORT = "https";
    var CONTENT_TYPE_JSON = "application/json";
    var AUTHORIZATION_HEADER = "Authorization";
    var ANALYTICS_SERVICE = "/services/AnalyticsWebService";
    var AUTHENTICATION_SERVICE = "/services/AuthenticationAdmin";
    var AUTH_TOKEN = "authToken";
    var WAIT_TIME = "waitTime";
    var LOCALHOST = "localhost";
    var MILLISECONDS_PER_SECOND = 1000;
    var TYPE_CLEAR_INDEX_DATA = 1;
    var TYPE_CREATE_TABLE = 2;
    var TYPE_DELETE_BY_ID = 3;
    var TYPE_DELETE_BY_RANGE = 4;
    var TYPE_DELETE_TABLE = 5;
    var TYPE_GET_RECORD_COUNT = 6;
    var TYPE_GET_BY_ID = 7;
    var TYPE_GET_BY_RANGE = 8;
    var TYPE_LIST_TABLES = 9;
    var TYPE_GET_SCHEMA = 10;
    var TYPE_PUT_RECORDS = 11;
    var TYPE_SEARCH = 12;
    var TYPE_SEARCH_COUNT = 13;
    var TYPE_SET_SCHEMA = 14;
    var TYPE_TABLE_EXISTS = 15;
    var TYPE_WAIT_FOR_INDEXING = 16;
    var TYPE_PAGINATION_SUPPORTED = 17;
    var TYPE_DRILLDOWN_CATEGORIES = 18;
    var TYPE_DRILLDOWN_SEARCH = 19;
    var TYPE_DRILLDOWN_SEARCH_COUNT = 20;
    var log = new Log();
    var carbon = require('carbon');
    var JSUtils = Packages.org.wso2.carbon.analytics.jsservice.Utils;
	var HTTPConstants = Packages.org.apache.axis2.transport.http.HTTPConstants;
    var AnalyticsWebServiceConnector = Packages.org.wso2.carbon.analytics.jsservice.AnalyticsWebServiceConnector;
	var AnalyticsWebServiceStub = Packages.org.wso2.carbon.analytics.webservice.stub.AnalyticsWebServiceStub;
    var AuthenticationAdminStub = Packages.org.wso2.carbon.authenticator.stub.AuthenticationAdminStub;
	var analyticsWSUrl = carbon.server.address(HTTPS_TRANSPORT) + ANALYTICS_SERVICE;
    var authenticationWSUrl = carbon.server.address(HTTPS_TRANSPORT) + AUTHENTICATION_SERVICE;
	var analyticsStub = new AnalyticsWebServiceStub(analyticsWSUrl);
    var authenticationStub = null;
	var serviceClient = analyticsStub._getServiceClient();
	var options = serviceClient.getOptions();
	options.setManageSession(true);
    response.contentType = CONTENT_TYPE_JSON;

    var authParam = request.getHeader(AUTHORIZATION_HEADER);
    if (authParam != null) {
        credentials = JSUtils.authenticate(authParam);
        authenticationAdminStub = new AuthenticationAdminStub(authenticationWSUrl);
        authenticationAdminStub.login(credentials[0], credentials[1], LOCALHOST);
        var serviceContext = authenticationAdminStub._getServiceClient().getLastOperationContext()
                .getServiceContext();
        var sessionCookie = serviceContext.getProperty(HTTPConstants.COOKIE_STRING);
        options.setProperty(HTTPConstants.COOKIE_STRING, sessionCookie);
    } else {
        options.setProperty(HTTPConstants.COOKIE_STRING, session.get(AUTH_TOKEN));
    }
    var connector = new AnalyticsWebServiceConnector(analyticsStub);

    var type = 0;
    var typeParam = request.getParameter(TYPE);
    if (typeParam != null) {
        type = parseInt(typeParam);
    }

    var tableName = request.getParameter(TABLE_NAME);
    if (type != TYPE_LIST_TABLES &&
        type != TYPE_PUT_RECORDS &&
        type != TYPE_PAGINATION_SUPPORTED) {
        if (tableName == null) {
            log.error("tableName is not provided!");
            print("{ \"status\": \"Failed\", \"message\": \"Table name param is empty\" }");
        }
    }

    var content = request.getContent();
    var contentAsString = JSON.stringify(content);
    if (connector != null) {
        switch (type) {
            case TYPE_LIST_TABLES:
            {
                print(connector.getTableList());
                break;
            }
            case TYPE_CREATE_TABLE:
            {
                print(connector.createTable(tableName));
                break;
            }
            case TYPE_DELETE_TABLE:
            {
                print(connector.deleteTable(tableName));
                break;
            }
            case TYPE_TABLE_EXISTS:
            {
                print(connector.tableExists(tableName));
                break;
            }
            case TYPE_GET_BY_RANGE:
            {
                var from = request.getParameter(TIME_FROM);
                var to = request.getParameter(TIME_TO);
                var start = request.getParameter(START);
                var count = request.getParameter(COUNT);
                print(connector.getRecordsByRange(tableName, from, to, start, count));
                break;
            }
            case TYPE_GET_BY_ID:
            {
                print(connector.getRecordsByIds(tableName, contentAsString));
                break;
            }
            case TYPE_GET_RECORD_COUNT:
            {
                print(connector.getRecordCount(tableName));
                break;
            }
            case TYPE_DELETE_BY_RANGE:
            {
                var timeFrom = Long.parseLong(request.getParameter(TIME_FROM));
                var timeTo = Long.parseLong(request.getParameter(TIME_TO));
                print(connector.deleteRecordsByRange(tableName, timeFrom, timeTo));
                break;
            }
            case TYPE_DELETE_BY_ID:
            {
                print(connector.deleteRecordsByIds(tableName, contentAsString));
                break;
            }
            case TYPE_CLEAR_INDEX_DATA:
            {
                print(connector.clearIndexData(tableName));
                break;
            }
            case TYPE_PUT_RECORDS:
            {
                print(connector.insertRecords(contentAsString));
                break;
            }
            case TYPE_SEARCH_COUNT:
            {
                print(connector.searchCount(tableName, contentAsString));
                break;
            }
            case TYPE_SEARCH:
            {
                print(connector.search(tableName, contentAsString));
                break;
            }
            case TYPE_SET_SCHEMA:
            {
                print(connector.setTableSchema(tableName, contentAsString));
                break;
            }
            case TYPE_GET_SCHEMA:
            {
                print(connector.getTableSchema(tableName));
                break;
            }
            case TYPE_PAGINATION_SUPPORTED:
            {
                print(connector.isPaginationSupported());
                break;
            }
            case TYPE_WAIT_FOR_INDEXING:
            {
                var waitTime = parseInt(request.getParameter(WAIT_TIME));
                print(connector.waitForIndexing(waitTime * MILLISECONDS_PER_SECOND));
                break;
            }
            case TYPE_DRILLDOWN_CATEGORIES:
            {
                print(connector.drillDownCategories(tableName, contentAsString));
                break;
            }
            case TYPE_DRILLDOWN_SEARCH:
            {
                print(connector.drillDownSearch(tableName, contentAsString));
                break;
            }
            case TYPE_DRILLDOWN_SEARCH_COUNT:
            {
                print(connector.drillDownSearchCount(tableName, contentAsString));
                break;
            }
            default:
                print("{ \"status\": \"Failed\", \"message\": \"Unidentified operation\" }");
        }
        if (authenticationStub != null) {
            authenticationStub.logout();
            authenticationStub = null;
        }
    } else {
        print("{ \"status\": \"Failed\", \"message\": \"AnalyticsWebServiceConnector is unavailable\" }");
    }
%>