<%
    var log = new Log();
    var HTTPConstants = Packages.org.apache.axis2.transport.http.HTTPConstants;

    //var AnalyticsWebServiceStub = Packages.org.wso2.carbon.analytics.webservice.stub.AnalyticsWebServiceStub;
    var EventStreamAdminServiceStub =  Packages.org.wso2.carbon.event.stream.stub.EventStreamAdminServiceStub;
    var EventPublisherAdminServiceStub = Packages.org.wso2.carbon.event.publisher.stub.EventPublisherAdminServiceStub
    //var analyticsWSUrl = 'https://localhost:9443/services/AnalyticsWebService';
    var eventStreamAdminServiceWSUrl = 'https://localhost:9443/services/EventStreamAdminService';
    var eventPublisherAdminServiceWSUrl = 'https://localhost:9443/services/EventPublisherAdminService';
    //var analyticsStub = new AnalyticsWebServiceStub(analyticsWSUrl);
    var eventStreamStub = new EventStreamAdminServiceStub(eventStreamAdminServiceWSUrl);
    var eventpublisherStub = new EventPublisherAdminServiceStub(eventPublisherAdminServiceWSUrl);
    //var serviceClient = analyticsStub._getServiceClient();
    var eventsStreamServiceClient =  eventStreamStub._getServiceClient();
    var eventsPublisherServiceClient =  eventpublisherStub._getServiceClient();

    /*var option = serviceClient.getOptions();
    option.setManageSession(true);
    option.setProperty(HTTPConstants.COOKIE_STRING, session.get('authToken'));*/

    var eventStreamOption = eventsStreamServiceClient.getOptions();
    eventStreamOption.setManageSession(true);
    eventStreamOption.setProperty(HTTPConstants.COOKIE_STRING, session.get('authToken'));

    var eventPublisherOption = eventsPublisherServiceClient.getOptions();
    eventPublisherOption.setManageSession(true);
    eventPublisherOption.setProperty(HTTPConstants.COOKIE_STRING, session.get('authToken'));

    var action = request.getParameter("action");
    response.contentType = 'application/json';

    if(action === "getDatasources") {
        var datasources = null;
        datasources = eventStreamStub.getStreamNames();
        print(datasources);
    } else if(action === "publisherIsExist") {
        var streamId = request.getParameter("streamId");
        var activePublisher = eventpublisherStub.getAllStreamSpecificActiveEventPublisherConfigurations(streamId);
        var publisherExist = false;
        if(activePublisher != null && activePublisher.length > 0){
            publisherExist = true;
        }
        print(publisherExist);
    } else if(action === "getDatasourceMetaData") {
        var datasource = request.getParameter("dataSource");
        var type = request.getParameter("type");
        var output  = [];

        if(type == "realtime"){
            //String streamId = request.getParameter("streamId");
            var correlationDataLength = 0;
            var metaDataLength = 0;
            var payloadDataLength = 0;
            var counter = 0;

            var eventStreamDefinitionDto
                    = eventStreamStub.getStreamDefinitionDto(datasource);

            var metaData = eventStreamDefinitionDto.getMetaData();
            var correlationData = eventStreamDefinitionDto.getCorrelationData();
            var payloadData = eventStreamDefinitionDto.getPayloadData();

            if(metaData != null){
                metaDataLength = metaData.length;
            }
            if(correlationData != null){
                correlationDataLength = correlationData.length;
            }
            if(payloadData != null){
                payloadDataLength = payloadData.length;
            }

            var allDataLength = metaDataLength + correlationDataLength + payloadDataLength;
            //var dtos = new ColumnDTO[allDataLength];

            for(var i=0;i<metaDataLength;i++){
                output.push({
                    name : metaData[i].getAttributeName(),
                    type : metaData[i].getAttributeType()
                });
                counter++;
            }
            for(var i=0;i<correlationDataLength;i++){
                output.push({
                    name : correlationData[i].getAttributeName(),
                    type : correlationData[i].getAttributeType()
                });
                counter++;
            }
            for(var i=0;i<payloadDataLength;i++){
                output.push({
                    name : payloadData[i].getAttributeName(),
                    type : payloadData[i].getAttributeType()
                });
                counter++;
            }
        } else {
            var schema = analyticsStub.getTableSchema(tableName);
            var columns = schema.getColumns();
            for (var i = 0; i < columns.length; i++) {
                var column = columns[i];
                output.push({
                    name : column.getColumnName(),
                    type : column.getColumnType()
                });
            };
        }
        print(output);
    } else if(action === "getData") {
        var tableName = request.getParameter("tableName");
        var filter = request.getParameter("filter");
        var timeFrom = new Date(1970,1,1).getTime();
        var timeTo = new Date().getTime();
        var start = 0;
        var recordCount = 10;
        var output = [],data;
        if(filter) {
            data = analyticsStub.search(tableName, filter, start, recordCount);
        } else {
            data = analyticsStub.getByRange(tableName, 1, null,timeFrom, timeTo, start, recordCount);
        }
        if(data) {
            for (var i = 0; i < data.length; i++) {
                var record = data[i];
                var row = {
                    id : record.getId(),
                    tableName : record.getTableName(),
                    values : extractRecordVals(record.getValues())
                };
                output.push(row);
            };      
        }
        print(output);
    }

    function extractRecordVals(values) {
        var vals = {};
        for (var i = 0; i < values.length; i++) {
            var value = values[i];
            var val;
            switch(value.getType()) {
                case "INTEGER":
                    val = value.getIntValue();
                    break;
                case "DOUBLE":
                    val=value.getDoubleValue();
                    break;
                case "LONG":
                    val=value.getLongValue();
                    break;
                case "FLOAT":
                    val=value.getFloatValue();
                    break;
                case "BOOLEAN":
                    val=value.getBooleanValue();
                    break;
                default:
                    val=value.getStringValue();
            }
            vals[value.getFieldName()] = val;
        };
        return vals;
    };

    
%>